# -*- coding: utf-8 -*-
"""CCM_Comfirmation_bias_RL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-FEfGqvxR-7dgGZU3tXu5LyPCkss0xjF

#Discrete environment #

## Network Architecture ##
"""

from google.colab import drive
drive.mount('/content/drive')

import torch
import torch.nn as nn
import torch.nn.functional as F
import math
from matplotlib import animation
import matplotlib.pyplot as plt
import os

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
class Dueling_Net(nn.Module):
    def __init__(self, args):
        super(Dueling_Net, self).__init__()
        self.fc1 = nn.Linear(args.state_dim, args.hidden_dim)
        self.fc2 = nn.Linear(args.hidden_dim, args.hidden_dim)
        if args.use_noisy:
            self.V = NoisyLinear(args.hidden_dim, 1)
            self.A = NoisyLinear(args.hidden_dim, args.action_dim)
        else:
            self.V = nn.Linear(args.hidden_dim, 1)
            self.A = nn.Linear(args.hidden_dim, args.action_dim)

    def forward(self, s):
        s = torch.relu(self.fc1(s))
        s = torch.relu(self.fc2(s))
        V = self.V(s)
        A = self.A(s)
        Q = V + (A - torch.mean(A, dim=-1, keepdim=True))
        return Q


class Net(nn.Module):
    def __init__(self, args):
        super(Net, self).__init__()
        self.fc1 = nn.Linear(args.state_dim, args.hidden_dim)
        self.fc2 = nn.Linear(args.hidden_dim, args.hidden_dim)
        if args.use_noisy:
            self.fc3 = NoisyLinear(args.hidden_dim, args.action_dim)
        else:
            self.fc3 = nn.Linear(args.hidden_dim, args.action_dim)

    def forward(self, s):
        s = torch.relu(self.fc1(s))
        s = torch.relu(self.fc2(s))
        Q = self.fc3(s)
        return Q


class NoisyLinear(nn.Module):
    def __init__(self, in_features, out_features, sigma_init=0.5):
        super(NoisyLinear, self).__init__()
        self.in_features = in_features
        self.out_features = out_features
        self.sigma_init = sigma_init

        self.weight_mu = nn.Parameter(torch.FloatTensor(out_features, in_features))
        self.weight_sigma = nn.Parameter(torch.FloatTensor(out_features, in_features))
        self.register_buffer('weight_epsilon', torch.FloatTensor(out_features, in_features))

        self.bias_mu = nn.Parameter(torch.FloatTensor(out_features))
        self.bias_sigma = nn.Parameter(torch.FloatTensor(out_features))
        self.register_buffer('bias_epsilon', torch.FloatTensor(out_features))

        self.reset_parameters()
        self.reset_noise()

    def forward(self, x):
        if self.training:
            self.reset_noise()
            weight = self.weight_mu + self.weight_sigma.mul(self.weight_epsilon)
            bias = self.bias_mu + self.bias_sigma.mul(self.bias_epsilon)

        else:
            weight = self.weight_mu
            bias = self.bias_mu

        return F.linear(x, weight, bias)

    def reset_parameters(self):
        mu_range = 1 / math.sqrt(self.in_features)
        self.weight_mu.data.uniform_(-mu_range, mu_range)
        self.bias_mu.data.uniform_(-mu_range, mu_range)

        self.weight_sigma.data.fill_(self.sigma_init / math.sqrt(self.in_features))
        self.bias_sigma.data.fill_(self.sigma_init / math.sqrt(self.out_features))

    def reset_noise(self):
        epsilon_i = self.scale_noise(self.in_features)
        epsilon_j = self.scale_noise(self.out_features)
        self.weight_epsilon.copy_(torch.ger(epsilon_j, epsilon_i))
        self.bias_epsilon.copy_(epsilon_j)

    def scale_noise(self, size):
        x = torch.randn(size)
        x = x.sign().mul(x.abs().sqrt())
        return x

import numpy as np
import copy

class DQN_CM(object):
    def __init__(self, args):
        self.action_dim = args.action_dim
        self.batch_size = args.batch_size
        self.max_train_steps = args.max_train_steps
        self.c_lr = args.c_lr
        # self.d_lr = args.d_lr
        self.d_lr = args.c_lr*args.k
        self.lr = args.lr
        self.gamma = args.gamma
        # we use tau to update the target q network
        self.tau = args.tau
        self.use_soft_update = args.use_soft_update
        # target updating freq to prevent oscillation
        self.target_update_freq = args.target_update_freq
        self.update_count = 0

        self.grad_clip = args.grad_clip
        self.use_lr_decay = args.use_lr_decay
        #
        self.net = Net(args)
        self.optimizer = torch.optim.Adam(self.net.parameters(), lr=self.lr)
        self.confirm_bia_optimizer = torch.optim.Adam(self.net.parameters(), lr=self.c_lr)
        self.disconfirm_bia_optimizer = torch.optim.Adam(self.net.parameters(), lr=self.d_lr)

        self.target_net = copy.deepcopy(self.net)

        self.net.to(device)
        self.target_net.to(device)
    def choose_action(self, state, epsilon):
        with torch.no_grad():
            state = torch.unsqueeze(torch.tensor(state, dtype=torch.float,device=device), 0)
            q = self.target_net(state)
            if np.random.uniform() > epsilon:
                action = q.argmax(dim=-1).item()
            else:
                action = np.random.randint(0, self.action_dim)
            return action

    def learn(self, replay_buffer, total_steps):
        batch, batch_index, IS_weight = replay_buffer.sample(total_steps)
        with torch.no_grad():
            a_argmax = self.net(batch['next_state']).argmax(dim=-1, keepdim=True)  # shape：(batch_size,1)
            # Use target_net to estimate the q_target
            q_target = batch['reward']+self.gamma*(1 - batch['terminal'])*self.target_net(batch['next_state']).gather(-1, a_argmax).squeeze(-1)
        q_current = self.net(batch['state']).gather(-1, batch['action']).squeeze(-1)  # shape：(batch_size,)
        td_errors = q_current - q_target  # shape：(batch_size,)

        # if self.use_per:
        #     loss = (IS_weight * (td_errors ** 2)).mean()
        #     replay_buffer.update_batch_priorities(batch_index, td_errors.detach().numpy())


        # ========== add confirmation bias ========= #
        self.target_net.eval()
        self.net.train()
        # loss = (td_errors ** 2).mean()
        # self.optimizer.zero_grad()
        # loss.backward()
        # self.optimizer.step()
        # use gradient descent to model confirmatory bias
        if td_errors.mean() > 0:
          loss = (td_errors ** 2).mean()
          # for g in self.optimizer.param_groups:
          #   g['lr'] = self.c_lr
          self.confirm_bia_optimizer.zero_grad()
          loss.backward()
          self.confirm_bia_optimizer.step()
        else:
          # use gradient ascent to model discomformatory bias
          loss = (td_errors ** 2).mean()
          # for g in self.optimizer.param_groups:
          #   g['lr'] = self.d_lr
          self.disconfirm_bia_optimizer.zero_grad()
          loss.backward()
          self.disconfirm_bia_optimizer.step()
        # if self.grad_clip:
        #     torch.nn.utils.clip_grad_norm_(self.net.parameters(), self.grad_clip)
        for param, target_param in zip(self.net.parameters(), self.target_net.parameters()):
          target_param.data.copy_(self.tau * param.data + (1 - self.tau) * target_param.data)

        if self.use_lr_decay:  # learning rate Decay

            self.lr_decay(total_steps,self.c_lr)

    def lr_decay(self, total_steps,lr):
        lr_now = 0.9 * lr * (1 - total_steps / self.max_train_steps) + 0.1 * lr
        for p in self.optimizer.param_groups:
            p['lr'] = lr_now

"""# add replay buffer #"""

class ReplayBuffer(object):
    def __init__(self, args):
        self.batch_size = args.batch_size
        self.buffer_capacity = args.buffer_capacity
        self.current_size = 0
        self.count = 0
        self.buffer = {'state': np.zeros((self.buffer_capacity, args.state_dim)),
                'action': np.zeros((self.buffer_capacity, 1)),
                'reward': np.zeros(self.buffer_capacity),
                'next_state': np.zeros((self.buffer_capacity, args.state_dim)),
                'terminal': np.zeros(self.buffer_capacity)
                }

    def store_transition(self, state, action, reward, next_state, terminal):

        self.buffer['state'][self.count] = state
        self.buffer['action'][self.count] = action
        self.buffer['reward'][self.count] = reward
        self.buffer['next_state'][self.count] = next_state
        self.buffer['terminal'][self.count] = terminal
        self.count = (self.count + 1) % self.buffer_capacity  # When the 'count' reaches buffer_capacity, it will be reset to 0.
        self.current_size = min(self.current_size + 1, self.buffer_capacity)

    def sample(self,total_eps):
        index = np.random.randint(0, self.current_size, size=self.batch_size)
        batch = {}
        for key in self.buffer.keys():  # numpy->tensor
            if key == 'action':
                batch[key] = torch.tensor(self.buffer[key][index], dtype=torch.long,device=device)
            else:
                batch[key] = torch.tensor(self.buffer[key][index], dtype=torch.float32,device=device)

        return batch, None, None

"""# environment #

"""

def adjust_epsilon(eps_start,eps_end,current_step,max_train_steps):
        eps_threshold = eps_start
        eps_threshold = eps_end + (eps_start-eps_end)* np.exp(-1. *current_step/max_train_steps)

        return eps_threshold

!pip install --upgrade pip
!pip install swig

!pip install gymnasium
!pip install box2d pygame

!pip install --upgrade box2d-py

import gym
import matplotlib.pyplot as plt
from tqdm import tqdm

def save_frames_as_gif(frames, path, filename='gym_animation.gif'):
    plt.figure(figsize=(frames[0].shape[1] / 72.0, frames[0].shape[0] / 72.0), dpi=72)
    patch = plt.imshow(frames[0])
    plt.axis('off')
    def animate(i):
        patch.set_data(frames[i])
    anim = animation.FuncAnimation(plt.gcf(), animate, frames = len(frames), interval=50)
    anim.save(path + filename, writer='imagemagick', fps=60)

def plot_reward(reward_list,path,title=None):
  plt.figure()
  plt.plot(reward_list,'b-',label="reward_list")
  plt.xlabel("Steps")
  plt.ylabel("Reward")
  plt.title(title)
  plt.legend()
  plt.savefig(path+"{title}.pdf")
  plt.show()
  plt.close()

def main(args):
  agent_model = DQN_CM(args)
  agent_model.net.to(device)
  replay_buffer = ReplayBuffer(args)
  base_path = "/content/drive/MyDrive/CCM-final"
  path = os.path.join(base_path,f"/{args.k}/")
  os.makedirs(path,exist_ok=True)
  env = gym.make("LunarLander-v2")
  reward_list = []
  test_reward_lst = []
  for itr_id in tqdm(range(args.max_train_steps)):
      state = env.reset(seed=42)
      reward_ep = 0
      epsilon = adjust_epsilon(args.epsilon_init,args.epsilon_min,itr_id,args.max_train_steps)
      for t in range(100):
        # in the first step we use epsilon greedy to ensure exploration

        action = agent_model.choose_action(state,epsilon)
        next_state, reward, terminated, truncated = env.step(action)
        replay_buffer.store_transition(state, action, reward, next_state, terminated)
        agent_model.learn(replay_buffer,args.max_train_steps)
        state = next_state
        reward_ep += reward
        if terminated or truncated:
          break
      reward_list.append(reward_ep)
      frames = []
      # ============================= #
      # running on the testing case#
      # visualzie the results animation#
      state = env.reset()
      test_reward = 0
      for t in range(100):
              frames.append(env.render(mode="rgb_array"))
              action = agent_model.choose_action(state,0)
              next_state, reward, terminated, truncated = env.step(action)
              state = next_state
              if terminated or truncated:
                  #print("Episode finished after {} timesteps".format(t+1))
                  break
              test_reward += reward
      test_reward_lst.append(test_reward)
      env.close()
  np.save("/content/drive/MyDrive/CCM-final/"+str(args.k)+"_test_reward_list.npy",test_reward_lst)
  plot_reward(test_reward_lst,"/content/drive/MyDrive/CCM-final",title="Testing Reward")
  save_frames_as_gif(frames,path)

import argparse
import sys
if __name__ == '__main__':
    for k in [1e-1,1e-2,1e-3,1e-4,1e-5]:
      sys.argv = ["--lr 3e-4"]
      parser = argparse.ArgumentParser("Hyperparameter Setting for DQN")

      # =============== confirmation bias hyperparameter selection ============ #
      parser.add_argument("--evaluate_freq", type=float, default=1e3, help="Evaluate the policy every 'evaluate_freq' steps")

      parser.add_argument("--c_lr", type=float, default=3e-4, help="Learning rate of confirmation")
      parser.add_argument("--lr", type=float, default=3e-4, help="Learning rate")
      parser.add_argument("--d_lr", type=float, default=3e-4, help="Learning rate of disconfirmation")
      parser.add_argument("--k", type=float, default=k, help="Learning rate of disconfirmation")

      # =============== test hyperparameter setting ================ #
      parser.add_argument("--max_train_steps", type=int, default=int(1e3), help=" Maximum number of training iterations")
      #名字冲突啦，后面加了_hyper
      parser.add_argument("--evaluate_freq_hyper", type=float, default=1e3, help="Evaluate the policy every 'evaluate_freq_hyper' steps")
      parser.add_argument("--evaluate_times", type=float, default=3, help="Evaluate times")

      # =============== network parameters setting ================= #
      parser.add_argument("--buffer_capacity", type=int, default=int(5e4), help="The maximum replay-buffer capacity ")
      parser.add_argument("--batch_size", type=int, default=32, help="batch size")
      parser.add_argument("--hidden_dim", type=int, default=100, help="The number of neurons in hidden layers of the neural network")
      parser.add_argument("--state_dim", type=int, default=8, help="State dimension")
      parser.add_argument("--gamma", type=float, default=0.99, help="Discount factor")
      parser.add_argument("--epsilon_init", type=float, default=1.0, help="Initial epsilon")
      parser.add_argument("--epsilon_min", type=float, default=0.01, help="Minimum epsilon")
      parser.add_argument("--tau", type=float, default=0.1, help="soft update the target network")
      parser.add_argument("--use_soft_update", type=bool, default=True, help="Whether to use soft update")
      parser.add_argument("--target_update_freq", type=int, default=200, help="Update frequency of the target network(hard update)")
      parser.add_argument("--n_steps", type=int, default=5, help="n_steps")
      parser.add_argument("--alpha", type=float, default=0.6, help="PER parameter")
      parser.add_argument("--beta_init", type=float, default=0.4, help="Important sampling parameter in PER")
      parser.add_argument("--use_lr_decay", type=bool, default=False, help="Learning rate Decay")
      parser.add_argument("--grad_clip", type=float, default=10.0, help="Gradient clip")
      parser.add_argument("--action_dim", type=int, default=4, help="action dimension")
      parser.add_argument("--use_noisy", type=bool,default=False, help="action dimension")

      # =============== trick setting ================= #

      args = parser.parse_args()

      # env_names = ['CartPole-v1', 'LunarLander-v2']
      # env_index = 1
      main(args)

"""##Ploting##"""

